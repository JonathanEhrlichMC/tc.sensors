{
    "collab_server" : "",
    "contents" : "#' Pull sensor volume and occupancy\n#'\n#' Create a tidy dataframe, containing volume and occupancy, for a single date and sensor.  Use `pull_sensor_ids` to obtain metro sensor IDs.\n#'\n#' @param pull_date an object of class integer or string which indicates the date of data to pull.  Can be in mdy, ymd, or dmy format, but format must be specified in the date_fmt argument.  A vector of dates is accepted when used in tandem with the `purrr::pmap()` function.\n#' @param date_fmt an object of class string which indicates the format of the `pull_date` argument.\n#' @param sensor an object of class integer or string which indicates the sensor ID.  See documentation for `pull_sensor_ids` to obtain metro sensor IDs.unction\n#'\n#' @return dataframe containing variables volume, occupancy, sensor, date, time.  Note that occupancy *can* be missing while volume data exists and vice versa.  It is unknown how a loop could be monitoring volume and not occupancy. Also note that if you assign the output of pull_loops, the result is returned in-memory, and there must be sufficient space in-memory to do so.\n#'\n#' @examples\n#'   # Simple example\n#'   loop_data <- pull_sensor(5474, \"20190101\", \"ymd\")\n\n#:   # Mapping example\n#'   date_range <- c(20190101:20190201) # 26 sec to pull 1 month worth of data\n#'   loop_data <- pmap(list(8564, date_range, \"ymd\"), pull_sensor)\n#'   loops_full <- rbindlist(loop_data)\n\n#'   # Parallel mapping example; takes longer if only pulling one or two days because libraries have to be copied to each core\n#'   library(parallel)\n#'   cl <- makeCluster(detectCores() - 1) %% Leaving one core unused\n#'   params <- list(8564, date_range, \"ymd\")\n#'\n#'   clusterSetRNGStream(cl, 1)\n#'   loop_data <- params %>%\n#'    lift(clusterMap, cl = cl)(fun = pull_sensor)\n#'   stopCluster(cl)\n\n#'   loops_full <- rbindlist(loop_data)\n\n#' @export\n\npull_sensors <- function(sensor, pull_date, date_fmt = c(\"ymd\", \"dmy\", \"mdy\")) {\n\n  library(tidyverse)\n  library(data.table)\n  library(lubridate)\n  library(chron)\n  library(rowr)\n\n  extension_pull <- function (ext, ...) {\n\n    library(tidyverse)\n    library(data.table)\n    library(jsonlite)\n\n    if (date_fmt == \"ymd\") {\n      pull_year <- year(as_date(ymd(pull_date)))\n    } else if (date_fmt == \"mdy\") {\n      pull_year <- year(as_date(mdy(pull_date)))\n    } else if (date_fmt == \"dmy\") {\n      pull_year <- year(as_date(dmy(pull_date)))\n    } else {\n      \"Date format not supported.  Try 'ymd', 'mdy', or 'dmy'.\"\n    }\n\n    df_default <- as_tibble(NA, validate = F)\n\n    try(df_default <- enframe(fromJSON(paste0(\"http://data.dot.state.mn.us:8080/trafdat/metro/\", pull_year, \"/\", pull_date, \"/\", sensor, \".\", ext, \"30.json\"))) %>%\n          select(-name))\n\n    return(df_default)\n\n  }\n\n  #exts <- c(\"v\", \"c\")\n  #loops_ls <- map(exts, extension_pull)\n\n  volume <- extension_pull(\"v\")\n  occupancy <- extension_pull(\"c\")\n\n  loop_uneven <- rowr::cbind.fill(volume, occupancy, fill = NA)\n  names(loop_uneven) <- c(\"volume\", \"occupancy\")\n\n  loop_date_sensor <- loop_uneven %>%\n    mutate(date = pull_date,\n           sensor = sensor)\n\n  #Add time\n  cbind(loop_date_sensor, enframe(chron::times(\"00:00:00\") + (1:2880)/2880) %>% transmute(time = value))\n\n}\n\n#' Function to pull all sensor IDs in the Twin Cities metro\n#'\n#' Create a tidy dataframe containing sensor IDs for MnDOT metro district, mainly to be used with pull_sensor\n#'\n#' @return dataframe containing variable \"detector\"\n#'\n#' @examples\n#' sensors <- sensor_pull()\n#'\n#' @export\n\nsensor_pull <- function() {\n  enframe(trimws(xml_attr(xml_find_all(metro_config, \"//detector\"), \"name\"))) %>%\n    transmute(detector = value)\n}\n\n#' Pull metro sensor configuration\n#'\n#' Read MnDOT JSON feed and wrangle into a tidy dataframe containing 20 variables related to sensor configuration.  Useful for mapping (contains lat/lons) and calculating performance measures (contains detector_field).\n#'\n#' @param return_opt an object of class string which indicates how to return the data.  \"within_dir\" will return the data within the directory as a csv entitled \"Configuration of Metro Detectors <<date in format yyyy-mm-dd>>\". \"in-memory\" will return the data in R, but requires assignment.\n#' @return dataframe containing 20 variables (including detector_field and lat/lons) for each sensor in MnDOT's metro district\n#'\n#' @examples\n#' config <- pull_configuration(\"in-memory\") # Assign to an object\n#' pull_configuration(\"within_dir) # No assignment necessary\n#'\n#' @export\n\npull_configuration <- function(return_opt = c(\"within_dir\", \"in_memory\")) {\n\n  url <- \"http://data.dot.state.mn.us/iris_xml/metro_config.xml.gz\"\n  tmp <- tempfile()\n  download.file(url,tmp)\n  metro_config <- read_xml(gzfile(tmp))\n\n  # ------------------\n  # PATHS\n  # ------------------\n\n  # Detector paths - connect rnodes and corridors to this\n  detector_paths <- enframe(xml_path(xml_find_all(metro_config, \"//detector\"))) %>%\n    mutate(detector_path = value) %>%\n    separate(detector_path, into = c('front', 'tms_config', 'device', 'rnode', 'detector'), sep = '/') %>%\n    unite(rnode_path, front, tms_config, device, rnode, sep = '/') %>%\n    mutate(rnode_path = trimws(rnode_path)) %>%\n    mutate(corridor_path = rnode_path) %>%\n    separate(corridor_path, into = c('front', 'tms_config', 'device', 'rnode'), sep = '/') %>%\n    unite(corridor_path, front, tms_config, device, sep = '/') %>%\n    mutate(corridor_path = trimws(corridor_path)) %>%\n    select(-name) %>%\n    rename(detector_path = value)\n\n  # Rnode paths\n  rnode_paths <- enframe(xml_path(xml_find_all(metro_config, \"//r_node\"))) %>%\n    transmute(rnode_path = value)\n\n  # Corridor paths\n  corridor_paths <- enframe(xml_path(xml_find_all(metro_config, \"//corridor\"))) %>%\n    transmute(corridor_path = value)\n\n  # ------------------\n  # ATTRIBUTES (rnodes & detectors)\n  # ------------------\n\n  attr_clean <- function(category, attribute) {\n    trimws(xml_attr(xml_find_all(metro_config, paste0(\"//\", category)), attribute))\n  }\n\n  d_attr_ls <- list(\"name\",\n                    \"label\",\n                    \"category\",\n                    \"lane\",\n                    \"field\",\n                    \"abandoned\")\n\n  rn_attr_ls <- list(\"name\",\n                     \"n_type\",\n                     \"transition\",\n                     \"label\",\n                     \"lon\",\n                     \"lat\",\n                     \"lanes\",\n                     \"shift\",\n                     \"s_limit\",\n                     \"station_id\",\n                     \"attach_side\")\n\n  c_attr_ls <- list(\"route\", \"dir\")\n\n  attr_to_df <- function(category, attr_ls) {\n    attributes_ls <- map2(category, attr_ls, attr_clean)\n    names(attributes_ls) <- paste(category, attr_ls, sep = \"_\")\n    bind_rows(attributes_ls)\n  }\n\n  attr_all_ls <- list(d_attr_ls, rn_attr_ls, c_attr_ls)\n  categories <- list(\"detector\", \"r_node\", \"corridor\")\n\n  attributes_full <- map2(categories, attr_all_ls, attr_to_df)\n  names(attributes_full) <- list(\"d_attributes_df\", \"r_attributes_df\", \"c_attributes_df\")\n  list2env(attributes_full ,.GlobalEnv)\n\n  # Bind paths to attributes\n  d_paths_attr <- bind_cols(detector_paths, d_attributes_df)\n  rnode_paths_attr <- bind_cols(rnode_paths, r_attributes_df)\n  corr_paths_attrs <- bind_cols(corridor_paths, c_attributes_df)\n\n  detector_rnodes_full <- left_join(d_paths_attr, rnode_paths_attr, by = c('rnode_path'))\n  configuration <- left_join(detector_rnodes_full, corr_paths_attrs, by = c('corridor_path'))\n\n  config_tidy <- configuration %>%\n    select(-rnode, -rnode_path, -detector, -detector_path, -corridor_path) %>%\n    mutate(date = Sys.Date())\n\n  if (return_opt == \"in_memory\") {\n\n    return(config_tidy)\n\n  } else if (return_opt == \"within_dir\") {\n\n    fwrite(config_tidy, paste0(\"Configuration of Metro Detectors \", Sys.Date(), \".csv\"))\n\n  }\n\n  config_tidy\n\n}\n",
    "created" : 1578939636684.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "848807519",
    "id" : "A97A19FA",
    "lastKnownWriteTime" : 1578940156,
    "last_content_update" : 1578940156584,
    "path" : "~/Professional/tc.sensors/R/loop_sensor_functions.R",
    "project_path" : "R/loop_sensor_functions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}